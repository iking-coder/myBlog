(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{270:function(t,s,a){t.exports=a.p+"assets/img/2-1.81c6847c.png"},271:function(t,s,a){t.exports=a.p+"assets/img/2-2.e816235d.png"},272:function(t,s,a){t.exports=a.p+"assets/img/2-3.2baea727.png"},300:function(t,s,a){"use strict";a.r(s);var n=a(4),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"javascript原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript原型链"}},[t._v("#")]),t._v(" JavaScript原型链")]),t._v(" "),n("p",[t._v("JavaScript作为一门面向对象的编程语言，对象是一个很重要的内容。而要深入理解对象就需要明白对象的原型链。在讲述原型链之前先熟悉一下两个概念。")]),t._v(" "),n("h2",{attrs:{id:"prototype"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" Prototype")]),t._v(" "),n("p",[t._v("prototype是函数对象的特有属性，任何一个函数对象都具备该属性。特别注意一下在JS中有一句话叫万物皆对象，万物皆可盘。所以函数也属于一种特殊对象。")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfuntion "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("以上函数a和函数b均具备prototype属性，而函数的prototype也是一个对象，称之为函数的原型对象，如下图2-1所示：\n"),n("img",{attrs:{src:a(270),alt:"图2-1"}})]),t._v(" "),n("h2",{attrs:{id:"proto"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),n("strong",[t._v("proto")])]),t._v(" "),n("p",[t._v("proto属性是任何一个对象都具备的属性，该属性指向构造对象的prototype。来看下面图2-2中的例子：\n"),n("img",{attrs:{src:a(271),alt:"图2-2"}}),t._v("\n图中定义一个对象c，c的构造对象是Object，所以c.__proto__指向构造对象Object.prototype。")]),t._v(" "),n("h2",{attrs:{id:"原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),n("p",[t._v("熟悉了prototype和__proto__两个概念以后，再来看原型链就会轻松很多，我们以最简单的情况来理解原型链，先来看下面的代码：")]),t._v(" "),n("div",{staticClass:"language-JavaScript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Person的实例对象")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("以上代码中先定义了一个构造函数Person，然后创建了Person构造函数的实力对象p。根据上面讲的我们可以知道实实例对象p的__proto__属性指向构造对象Person的prototype属性。而Person.prototype本身也是一个对象，那么Person.prototype也应该有一个构造对象，这个构造对象就是JS中的原始对象Object，所以Person.prototype.__proto__应该指向Object.prototype，这样就形成一个链式，我们称之为原型链。不过还有最后一环，那就是Object.prototype也是一个对象，那么它的__proto__指向什么？我们在浏览器中运行一下，验证一下以上的结论和看一下最后一环的结果，如图2-3所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(272),alt:"图2-3"}})]),t._v(" "),n("p",[t._v("根据上图验证结果我们可以得知最后一环Objec.prototype.__proto__指向null。这样就形成一个完整的原型链，至于更复杂的原型链也是根据这个原则衍生出来的，可以根据这个规则去解读，进而深入理解各种类型的继承模式。")])])}),[],!1,null,null,null);s.default=r.exports}}]);