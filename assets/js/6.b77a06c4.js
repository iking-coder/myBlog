(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{266:function(t,a,s){t.exports=s.p+"assets/img/1-1.8121dc28.png"},267:function(t,a,s){t.exports=s.p+"assets/img/1-2.b944bc63.png"},268:function(t,a,s){t.exports=s.p+"assets/img/1-3.1bc592d2.png"},269:function(t,a,s){t.exports=s.p+"assets/img/1-4.a693a9cd.png"},301:function(t,a,s){"use strict";s.r(a);var r=s(4),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"javascript隐式转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript隐式转换"}},[t._v("#")]),t._v(" JavaScript隐式转换")]),t._v(" "),r("p",[t._v("以前自己学习JavaScript的时候，对于隐式转换只进行了粗浅的了解，最近在网上看到一些关于JavaScript隐式转换的基础笔试题，因此深入研究了一下，整理这篇笔记。")]),t._v(" "),r("h2",{attrs:{id:"装箱转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#装箱转换"}},[t._v("#")]),t._v(" 装箱转换")]),t._v(" "),r("p",[t._v("首先来看一下下面这句代码的运行结果：")]),t._v(" "),r("div",{staticClass:"language-JavaScript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[t._v("  "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("p",[t._v('不知道大家的第一反应是不是认为会得到字符串"1"，反正我当时是这样想的，可在浏览器控制台中实际执行后的到的结果却是报错，如图1-1所示：\n'),r("img",{attrs:{src:s(266),alt:"图1-1"}}),t._v("\n那么为什么会报错？这是因为浏览器解析JavaScript的时候会先做词法分析，而JavaScript中数值的直接量是十进制，允许带小数点，并且小数点前或小数点后可以省掉，但不能同时省略。如图1-2所示：\n"),r("img",{attrs:{src:s(267),alt:"图1-2"}}),t._v('\n正是因为以上原因导致浏览器在解析的时候不会认为是在调用toString方法，从而报错，所以希望得到运行结果为字符串"1"，可以是如图1-3的几种写法：\n'),r("img",{attrs:{src:s(268),alt:"图1-3"}}),t._v("\n那么为什么上面的数字1会有toString方法可以调用？这是因为在运行的时候，数字1会被装箱操作，转化成一个临时的Number对象，而Number.prototype原型对象上就有toString方法。其他类型布尔和字符串也是如此。")]),t._v(" "),r("h2",{attrs:{id:"拆箱转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#拆箱转换"}},[t._v("#")]),t._v(" 拆箱转换")]),t._v(" "),r("p",[t._v("我曾经看到几道要求回答以下代码运行结果的面试题：")]),t._v(" "),r("div",{staticClass:"language-JavaScript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[t._v("  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("p",[t._v("大家不妨自己想思考一下以上代码运行的结果，然后来看一下在浏览器控制台的实际运行结果如图1-4所示：\n"),r("img",{attrs:{src:s(269),alt:"图1-4"}})]),t._v(" "),r("p",[t._v("JavaScript在把对象转换成原始类型的时候会进行拆箱转换。必然会调用toPrimitive()内部函数。")]),t._v(" "),r("div",{staticClass:"language-JavaScript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[t._v("  "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrimitive")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" perferedType"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("p",[t._v("其中input代表输入的对象，perferedType代表期望输出的类型，可以是字符串，也可以是数字，也可以省略preferedType，此时，日期会被认为是字符串，而其他的值会被当做Number。")]),t._v(" "),r("h3",{attrs:{id:"期望类型是number"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#期望类型是number"}},[t._v("#")]),t._v(" 期望类型是Number")]),t._v(" "),r("p",[t._v("如果期望输出的类似是Number，会进行以下步骤：")]),t._v(" "),r("h4",{attrs:{id:"_1、如果input是原始值，直接返回这个值；"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、如果input是原始值，直接返回这个值；"}},[t._v("#")]),t._v(" 1、如果input是原始值，直接返回这个值；")]),t._v(" "),r("h4",{attrs:{id:"_2、否则，如果input是对象，调用input-valueof-，如果结果是原始值，返回结果；"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、否则，如果input是对象，调用input-valueof-，如果结果是原始值，返回结果；"}},[t._v("#")]),t._v(" 2、否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；")]),t._v(" "),r("h4",{attrs:{id:"_3、否则，调用input-tostring-。如果结果是原始值，返回结果；"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、否则，调用input-tostring-。如果结果是原始值，返回结果；"}},[t._v("#")]),t._v(" 3、否则，调用input.toString()。如果结果是原始值，返回结果；")]),t._v(" "),r("h4",{attrs:{id:"_4、否则，抛出错误。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、否则，抛出错误。"}},[t._v("#")]),t._v(" 4、否则，抛出错误。")]),t._v(" "),r("h3",{attrs:{id:"期望类型是string"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#期望类型是string"}},[t._v("#")]),t._v(" 期望类型是String")]),t._v(" "),r("p",[t._v("如果期望输出类型是String,会进行以下步骤：")]),t._v(" "),r("h4",{attrs:{id:"_1、如果input是原始值，直接返回这个值；-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、如果input是原始值，直接返回这个值；-2"}},[t._v("#")]),t._v(" 1、如果input是原始值，直接返回这个值；")]),t._v(" "),r("h4",{attrs:{id:"_2、否则，调用input-tostring-。如果结果是原始值，返回结果；"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、否则，调用input-tostring-。如果结果是原始值，返回结果；"}},[t._v("#")]),t._v(" 2、否则，调用input.toString()。如果结果是原始值，返回结果；")]),t._v(" "),r("h4",{attrs:{id:"_3、否则，如果input是对象，调用input-valueof-，如果结果是原始值，返回结果；"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、否则，如果input是对象，调用input-valueof-，如果结果是原始值，返回结果；"}},[t._v("#")]),t._v(" 3、否则，如果input是对象，调用input.valueOf()，如果结果是原始值，返回结果；")]),t._v(" "),r("h4",{attrs:{id:"_4、否则，抛出错误。-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、否则，抛出错误。-2"}},[t._v("#")]),t._v(" 4、否则，抛出错误。")]),t._v(" "),r("p",[t._v('综上所述，空数组[]进行拆箱转换以后会得到空字符串，所以[]+[]的运行结果就是空字符串；而[]+{}因为加号运算符的定义是：如果其中一个是字符串，另一个也会被转换为字符串，否则两个运算数都被转换为数字。所以得到结果是"[object Object]"，但是为什么{}+[]得到的结果却是0？这是因为{}即可以认为是对象字面量，也可以认为是代码块。这样便很好解释了{}+[]其实就是+[]，因为+号的原故最终结果即为0。')])])}),[],!1,null,null,null);a.default=n.exports}}]);